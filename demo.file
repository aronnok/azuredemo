az aks get-credentials --resource-group DefaultResourceGroup-EUS --name demo2
az aks browse --resource-group DefaultResourceGroup-EUS --name demo2


az ad sp create-for-rbac  --scopes /subscriptions/asd6/resourcegroups/<RG_NAME>/providers/Microsoft.ContainerRegistry/registries/demoazureregistry --role Contributor --name demoazureregistry

az acr create --name demo.azure.registry --resource-group DefaultResourceGroup-EUS --sku Basic

az aks browse --resource-group DefaultResourceGroup-EUS --name demo2
$env:path += 'C:\Users\imzmr\.azure-kubectl'
az aks browse --resource-group DefaultResourceGroup-EUS --name demo2


az acr login --name <acrName>




kubectl create secret demo-secret --docker-server 
--docker-username $CLIENT_ID \
--docker-password $SP_PASSWD \
--docker-email EMAIL-ADDRESS



kubectl expose deployment devops-api-ms --type=LoadBalancer --port=8889 --target-port=8889

kubectl expose deployment gateway-ms --type=LoadBalancer --port=8888 --target-port=8888

To Test the POC working, please load the Kubernates-Microservices-POC.postman_collection.json in Postman. 
All the working API is listed over there. 

############################

1. Demoing API for microservices, overview the previous demo
2. Making APIs with called DevOps-API 
3. Making Gateway that will route the API calls to DevOPs-API
   Here are the actual code in the repo
4. There are 3 branches in the repo which are used. 
gateway-ms and devopsapi. 
5. If the code is pushed to gateway branch the code will trigger the pipeline 
job of gateway-ms. 
6. It will 
     -checkout the code
     -build the artifact using maven
     -Build a docker image from Dockerfile
     - Push the image to registry
     - Tag the image with both latest and build
     - Apply the Kubernetes deployment of this image from the registry 

 7. In kubernetes we have both deployments and services 
 8. Demo the logs in kubernetes 
 9. Demo how code propagates to kubernetes 
 10. Create new APIs and demo it 
 11. Call the API to live demo it 
